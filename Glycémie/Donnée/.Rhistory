ifelse(km >= 65 & km < 89, "Rioupéroux",
ifelse(km >= 89 & km < 100, "Croix de Chamrousse",
ifelse(km >= 100 & km < 133, "St- Nazaire-les Eymes",
ifelse(km >= 133 & km < 159, "Cabane du Bachasson",
ifelse(km >= 159 & km <= 175, "Grenoble",NA))))))))))
# ----------------------------------------------------------------------------- #
# Jointure de data_score et data_km_section
data_km_section_score <- data_km_section %>% left_join(data_score, by = "section")
data_km_section_score$numero_participant<- as.numeric(data_km_section_score$numero_participant)
data_km_section_score <- data_km_section_score[order(data_km_section_score$numero_participant), ]
# ----------------------------------------------------------------------------- #
# Traitement des données denivelé
data_denivele$denivele_positif <- c(data_denivele$denivele_pos[1], diff(data_denivele$denivele_pos))
data_denivele$denivele_negatif <- c(data_denivele$denivele_neg[1], diff(data_denivele$denivele_neg))
# ----------------------------------------------------------------------------- #
# Jointure de data_km_section_score et denivele
data_km_section_score_denivele <- data_km_section_score %>%
left_join(data_denivele, by = "km")
# ----------------------------------------------------------------------------- #
# Calculer le temps par km en fonction des dénivelés
data_km_section_score_denivele <- data_km_section_score_denivele %>%
group_by(numero_participant, section) %>%
mutate(
temps_par_km_minute = (temps_ecoule_en_heure * 60) * (1/3 * denivele_positif + 2/3 * denivele_negatif) /
sum(1/3 * denivele_positif + 2/3 * denivele_negatif)
)
View(data_km_section_score_denivele)
View(data_denivele)
# ----------------------------------------------------------------------------- #
# Packages
library(dplyr)
library(magrittr)
library(readxl)
# ----------------------------------------------------------------------------- #
# Importation des données récoltées
data_glycemie <- read.csv2("Données_Glycémie/data_glucoseV2.csv")
data_score <- read.csv2("Données_course -psycho-alim/data_scoreV1.csv")
data_denivele <- read_excel("Données_course -psycho-alim/denivele_par_km.xlsx")
# ----------------------------------------------------------------------------- #
# Nettoyage data_score
# Renommer et sélectionner les colonnes utiles
data_score %<>%
select("X1..Quel_est_votre_numero_de_participante_de",
"X2..lieu",
"X3..Perception_effort",
"X4..inconfort.m",
"X5..plaisir.r",
"X6..di.freq" ,
"X7..di.effic",
"X8..desir",
"X9..conflit",
"X10..resist",
"X11..desir1",
"X23..DATE_SAISIE") %>%
rename(numero_participant = "X1..Quel_est_votre_numero_de_participante_de",
section = "X2..lieu",
perception = "X3..Perception_effort",
inconfort = "X4..inconfort.m",
plaisir = "X5..plaisir.r",
di.freq = "X6..di.freq",
di.effic = "X7..di.effic",
desir = "X8..desir",
conflit = "X9..conflit",
resist = "X10..resist",
desir1 = "X11..desir1",
date = "X23..DATE_SAISIE")
data_score$date <- as.POSIXct(data_score$date, format = "%Y-%m-%d %H:%M:%S")
# Créer une nouvelle ligne avec la section "Seyssins" et la date spécifiée
nouvelle_section <- data.frame(numero_participant = rep(unique(data_score$numero_participant), each = 1),
section = "Seyssins",
perception = NA,
inconfort = NA,
plaisir = NA,
di.freq = NA,
di.effic = NA,
desir = NA,
conflit = NA,
resist = NA,
desir1 = NA,
date = as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S"))
# Ajouter la nouvelle ligne à la dataframe existante
# La dataframe data_score contiendra maintenant une nouvelle section "Seyssins" pour tous les participants.
# La colonne temps_ecoule contiendra la différence de temps en minutes entre chaque ligne pour chaque participant.
data_score <- rbind(data_score, nouvelle_section) %>%
arrange(numero_participant, date) %>%
group_by(numero_participant) %>%
mutate(temps_ecoule_en_heure = ifelse(section == "Seyssins", 0, difftime(date, lag(date), units = "hours")))
# Ajout d'une colonne finisher
abandon <- c(3,4,12,15,16,23,34,35,36)
data_score %<>%
mutate(finisher = ifelse(!(numero_participant %in% abandon),"finisher","abandon"))
# Ajout de la date de référence pour plus tard
data_score %<>%
group_by(numero_participant) %>%
mutate(date_reference = case_when(
section == "Seyssins" ~ as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S"),
TRUE ~ lag(date, default = NA)
))
# ----------------------------------------------------------------------------- #
# Création de la dataframe des km/sections
data_km_section <- data.frame("km"= c(0:175))
data_km_section %<>%
mutate(section = ifelse(km == 0, "Seyssins",
ifelse(km > 0 & km < 12, "Saint Nizier du Moucherotte",
ifelse(km >= 12 & km < 31,"Saint Paul de Varces",
ifelse(km >= 31 & km < 65,"La Morte",
ifelse(km >= 65 & km < 89, "Rioupéroux",
ifelse(km >= 89 & km < 100, "Croix de Chamrousse",
ifelse(km >= 100 & km < 133, "St- Nazaire-les Eymes",
ifelse(km >= 133 & km < 159, "Cabane du Bachasson",
ifelse(km >= 159 & km <= 175, "Grenoble",NA))))))))))
# ----------------------------------------------------------------------------- #
# Jointure de data_score et data_km_section
data_km_section_score <- data_km_section %>% left_join(data_score, by = "section")
data_km_section_score$numero_participant<- as.numeric(data_km_section_score$numero_participant)
data_km_section_score <- data_km_section_score[order(data_km_section_score$numero_participant), ]
# ----------------------------------------------------------------------------- #
# Traitement des données denivelé
data_denivele$denivele_positif <- c(data_denivele$denivele_pos[1], diff(data_denivele$denivele_pos))
data_denivele$denivele_negatif <- c(data_denivele$denivele_neg[1], diff(data_denivele$denivele_neg))
# ----------------------------------------------------------------------------- #
# Jointure de data_km_section_score et denivele
data_km_section_score_denivele <- data_km_section_score %>%
left_join(data_denivele, by = "km")
# ----------------------------------------------------------------------------- #
# Calculer le temps par km en fonction des dénivelés
data_km_section_score_denivele <- data_km_section_score_denivele %>%
group_by(numero_participant, section) %>%
mutate(
temps_par_km_minute = (temps_ecoule_en_heure * 60) * (1/3 * denivele_positif + 2/3 * denivele_negatif) /
sum(1/3 * denivele_positif + 2/3 * denivele_negatif)
)
# Calculer le temps cumulé pour chaque km
# Cette ligne de code est juste utile pour vérifier que cela a bien fonctionné
#data_km_section_score_denivele$temps_cumule <- cumsum(data_km_section_score_denivele$temps_par_km)/60
# Création d'une colonne "temps_en_minute_cumule" basée sur la distance parcourue
data_km_section_score_denivele <- data_km_section_score_denivele %>%
group_by(numero_participant) %>%
mutate(temps_en_minute_cumule = cumsum(temps_par_km_minute))
# Convertir temps_en_minute_cumule en secondes (en considérant la partie décimale)
data_km_section_score_denivele %<>%
mutate(
temps_en_seconde_cumule = temps_en_minute_cumule * 60,  # Convertir en secondes
nouvelle_date = as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S") + lubridate::seconds(temps_en_seconde_cumule)
) %>%
mutate(nouvelle_date = format(nouvelle_date, format="%Y-%m-%d %H:%M:%S")) %>%
select(-date) %>% # Supprime la colonne date
select(-temps_en_seconde_cumule) # Supprime la colonne temps_en_seconde_cumule
moy_glycemie <- data.frame(numero_participant =numeric(0),km = numeric(0),glucose= numeric(0))
for(i in 1:length(unique(data_km_section_score_denivele$numero_participant))){
km <- as.vector(data_km_section_score_denivele %>% filter(numero_participant == i) %>% select(km))$km
cpt <- 0
for(j in km){
if(j == 0 | (j-1) != (cpt-1)){
# Définir les dates de début et de fin
date <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j)
# Filtrer les lignes entre les deux dates
data_temp <- data_glycemie %>%
filter(numero_participant == i) %>%
filter(datetime == date$nouvelle_date)
nouvelle_val <- c(i,j,data_temp$glucose)
moy_glycemie <- rbind(moy_glycemie,nouvelle_val)
#moy_glycemie <- c(moy_glycemie, data_temp$glucose)
if((j-1) != (cpt-1)){cpt <-j}
}else{
# Définir les dates de début et de fin
date_debut <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j -1)
date_fin <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j)
# Filtrer les lignes entre les deux dates
data_temp <- data_glycemie %>%
filter(numero_participant == i) %>%
filter(datetime >= date_debut$nouvelle_date & datetime <= date_fin$nouvelle_date)
nouvelle_val <- c(i,j, mean(data_temp$glucose))
moy_glycemie <- rbind(moy_glycemie,nouvelle_val)
#moy_glycemie <- c(moy_glycemie, mean(data_temp$glucose))
}
cpt <- cpt + 1
#print(j)
#print(cpt)
}
#print(i)
}
colnames(moy_glycemie) <- c("numero_participant", "km", "moy_glucose")
moy_glycemie
# ----------------------------------------------------------------------------- #
# Packages
library(dplyr)
library(magrittr)
library(readxl)
# ----------------------------------------------------------------------------- #
# Importation des données récoltées
data_glycemie <- read.csv2("Données_Glycémie/data_glucoseV2.csv")
data_score <- read.csv2("Données_course -psycho-alim/data_scoreV1.csv")
data_denivele <- read_excel("Données_course -psycho-alim/denivele_par_km.xlsx")
# ----------------------------------------------------------------------------- #
# Nettoyage data_score
# Renommer et sélectionner les colonnes utiles
data_score %<>%
select("X1..Quel_est_votre_numero_de_participante_de",
"X2..lieu",
"X3..Perception_effort",
"X4..inconfort.m",
"X5..plaisir.r",
"X6..di.freq" ,
"X7..di.effic",
"X8..desir",
"X9..conflit",
"X10..resist",
"X11..desir1",
"X23..DATE_SAISIE") %>%
rename(numero_participant = "X1..Quel_est_votre_numero_de_participante_de",
section = "X2..lieu",
perception = "X3..Perception_effort",
inconfort = "X4..inconfort.m",
plaisir = "X5..plaisir.r",
di.freq = "X6..di.freq",
di.effic = "X7..di.effic",
desir = "X8..desir",
conflit = "X9..conflit",
resist = "X10..resist",
desir1 = "X11..desir1",
date = "X23..DATE_SAISIE")
data_score$date <- as.POSIXct(data_score$date, format = "%Y-%m-%d %H:%M:%S")
# Créer une nouvelle ligne avec la section "Seyssins" et la date spécifiée
nouvelle_section <- data.frame(numero_participant = rep(unique(data_score$numero_participant), each = 1),
section = "Seyssins",
perception = NA,
inconfort = NA,
plaisir = NA,
di.freq = NA,
di.effic = NA,
desir = NA,
conflit = NA,
resist = NA,
desir1 = NA,
date = as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S"))
# Ajouter la nouvelle ligne à la dataframe existante
# La dataframe data_score contiendra maintenant une nouvelle section "Seyssins" pour tous les participants.
# La colonne temps_ecoule contiendra la différence de temps en minutes entre chaque ligne pour chaque participant.
data_score <- rbind(data_score, nouvelle_section) %>%
arrange(numero_participant, date) %>%
group_by(numero_participant) %>%
mutate(temps_ecoule_en_heure = ifelse(section == "Seyssins", 0, difftime(date, lag(date), units = "hours")))
# Ajout d'une colonne finisher
abandon <- c(3,4,12,15,16,23,34,35,36)
data_score %<>%
mutate(finisher = ifelse(!(numero_participant %in% abandon),"finisher","abandon"))
# Ajout de la date de référence pour plus tard
data_score %<>%
group_by(numero_participant) %>%
mutate(date_reference = case_when(
section == "Seyssins" ~ as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S"),
TRUE ~ lag(date, default = NA)
))
# ----------------------------------------------------------------------------- #
# Création de la dataframe des km/sections
data_km_section <- data.frame("km"= c(0:175))
data_km_section %<>%
mutate(section = ifelse(km == 0, "Seyssins",
ifelse(km > 0 & km < 12, "Saint Nizier du Moucherotte",
ifelse(km >= 12 & km < 31,"Saint Paul de Varces",
ifelse(km >= 31 & km < 65,"La Morte",
ifelse(km >= 65 & km < 89, "Rioupéroux",
ifelse(km >= 89 & km < 100, "Croix de Chamrousse",
ifelse(km >= 100 & km < 133, "St- Nazaire-les Eymes",
ifelse(km >= 133 & km < 159, "Cabane du Bachasson",
ifelse(km >= 159 & km <= 175, "Grenoble",NA))))))))))
# ----------------------------------------------------------------------------- #
# Jointure de data_score et data_km_section
data_km_section_score <- data_km_section %>% left_join(data_score, by = "section")
data_km_section_score$numero_participant<- as.numeric(data_km_section_score$numero_participant)
data_km_section_score <- data_km_section_score[order(data_km_section_score$numero_participant), ]
# ----------------------------------------------------------------------------- #
# Traitement des données denivelé
data_denivele$denivele_positif <- c(data_denivele$denivele_pos[1], diff(data_denivele$denivele_pos))
data_denivele$denivele_negatif <- c(data_denivele$denivele_neg[1], diff(data_denivele$denivele_neg))
# ----------------------------------------------------------------------------- #
# Jointure de data_km_section_score et denivele
data_km_section_score_denivele <- data_km_section_score %>%
left_join(data_denivele, by = "km")
# ----------------------------------------------------------------------------- #
# Calculer le temps par km en fonction des dénivelés
data_km_section_score_denivele <- data_km_section_score_denivele %>%
group_by(numero_participant, section) %>%
mutate(
temps_par_km_minute = ifelse(km == 0, 0,(temps_ecoule_en_heure * 60) * (1/3 * denivele_positif + 2/3 * denivele_negatif) /
sum(1/3 * denivele_positif + 2/3 * denivele_negatif))
)
# Création d'une colonne "temps_en_minute_cumule" basée sur la distance parcourue
data_km_section_score_denivele <- data_km_section_score_denivele %>%
group_by(numero_participant) %>%
mutate(temps_en_minute_cumule = cumsum(temps_par_km_minute))
# Convertir temps_en_minute_cumule en secondes (en considérant la partie décimale)
data_km_section_score_denivele %<>%
mutate(
temps_en_seconde_cumule = temps_en_minute_cumule * 60,  # Convertir en secondes
nouvelle_date = as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S") + lubridate::seconds(temps_en_seconde_cumule)
) %>%
mutate(nouvelle_date = format(nouvelle_date, format="%Y-%m-%d %H:%M:%S")) %>%
select(-date) %>% # Supprime la colonne date
select(-temps_en_seconde_cumule) # Supprime la colonne temps_en_seconde_cumule
moy_glycemie <- data.frame(numero_participant =numeric(0),km = numeric(0),glucose= numeric(0))
for(i in 1:length(unique(data_km_section_score_denivele$numero_participant))){
km <- as.vector(data_km_section_score_denivele %>% filter(numero_participant == i) %>% select(km))$km
cpt <- 0
for(j in km){
if(j == 0 | (j-1) != (cpt-1)){
# Définir les dates de début et de fin
date <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j)
# Filtrer les lignes entre les deux dates
data_temp <- data_glycemie %>%
filter(numero_participant == i) %>%
filter(datetime == date$nouvelle_date)
nouvelle_val <- c(i,j,data_temp$glucose)
moy_glycemie <- rbind(moy_glycemie,nouvelle_val)
#moy_glycemie <- c(moy_glycemie, data_temp$glucose)
if((j-1) != (cpt-1)){cpt <-j}
}else{
# Définir les dates de début et de fin
date_debut <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j -1)
date_fin <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j)
# Filtrer les lignes entre les deux dates
data_temp <- data_glycemie %>%
filter(numero_participant == i) %>%
filter(datetime >= date_debut$nouvelle_date & datetime <= date_fin$nouvelle_date)
nouvelle_val <- c(i,j, mean(data_temp$glucose))
moy_glycemie <- rbind(moy_glycemie,nouvelle_val)
#moy_glycemie <- c(moy_glycemie, mean(data_temp$glucose))
}
cpt <- cpt + 1
#print(j)
#print(cpt)
}
#print(i)
}
colnames(moy_glycemie) <- c("numero_participant", "km", "moy_glucose")
# Jointure
data_km_section_score_glycemie <- data_km_section_score_denivele %>% left_join(moy_glycemie, by = join_by("numero_participant", "km"))
View(data_km_section_score_glycemie)
# Écrivez le dataframe dans le fichier csv
write.csv2(data_km_section_score_glycemie, file = "~/Documents/GitHub/UT4M_psycho/Glycémie/Donnée/data_km_section_score_glycemieV2.csv", row.names = FALSE)
colnames(data_denivele)
# ----------------------------------------------------------------------------- #
# Chargement des packages
library(dplyr)       # Manipulation de données
library(magrittr)    # Opérateurs de pipe
library(readxl)      # Lecture de fichiers Excel
# ----------------------------------------------------------------------------- #
# Importation des données
# Charger les données de la glycémie
data_glycemie <- read.csv2("Données_Glycémie/data_glucoseV2.csv")
# Charger les données de score
data_score <- read.csv2("Données_course -psycho-alim/data_scoreV1.csv")
# Charger les données de dénivelé par km
data_denivele <- read_excel("Données_course -psycho-alim/denivele_par_km.xlsx")
# ----------------------------------------------------------------------------- #
# Nettoyage des données de score
data_score %<>%
# Sélectionner et renommer les colonnes utiles
select(numero_participant = "X1..Quel_est_votre_numero_de_participante_de",
section = "X2..lieu",
perception = "X3..Perception_effort",
inconfort = "X4..inconfort.m",
plaisir = "X5..plaisir.r",
di.freq = "X6..di.freq",
di.effic = "X7..di.effic",
desir = "X8..desir",
conflit = "X9..conflit",
resist = "X10..resist",
desir1 = "X11..desir1",
date = "X23..DATE_SAISIE") %>%
# Renommer les colonnes
rename_with(~ tolower(gsub("X[0-9]+\\.{2}", "", .)), -numero_participant) %>%
# Convertir la colonne date au format POSIXct
mutate(date = as.POSIXct(date, format = "%Y-%m-%d %H:%M:%S"))
# Créer une nouvelle ligne avec la section "Seyssins" et la date spécifiée
nouvelle_section <- data.frame(numero_participant = rep(unique(data_score$numero_participant), each = 1),
section = "Seyssins",
perception = NA,
inconfort = NA,
plaisir = NA,
di.freq = NA,
di.effic = NA,
desir = NA,
conflit = NA,
resist = NA,
desir1 = NA,
date = as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S"))
# Ajouter la nouvelle ligne à la dataframe existante et calculer le temps écoulé en heures
data_score <- rbind(data_score, nouvelle_section) %>%
arrange(numero_participant, date) %>%
group_by(numero_participant) %>%
mutate(temps_ecoule_en_heure = ifelse(section == "Seyssins", 0, difftime(date, lag(date), units = "hours")))
# Ajout de la colonne finisher
abandon <- c(3,4,12,15,16,23,34,35,36)
data_score %<>%
mutate(finisher = ifelse(!(numero_participant %in% abandon),"finisher","abandon"))
# Ajout de la date de référence pour plus tard
data_score %<>%
group_by(numero_participant) %>%
mutate(date_reference = case_when(
section == "Seyssins" ~ as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S"),
TRUE ~ lag(date, default = NA)
))
# ----------------------------------------------------------------------------- #
# Création de la dataframe des km/sections
data_km_section <- data.frame("km"= c(0:175))
data_km_section %<>%
mutate(section = case_when(
km == 0 ~ "Seyssins",
km > 0 & km < 12 ~ "Saint Nizier du Moucherotte",
km >= 12 & km < 31 ~ "Saint Paul de Varces",
km >= 31 & km < 65 ~ "La Morte",
km >= 65 & km < 89 ~ "Rioupéroux",
km >= 89 & km < 100 ~ "Croix de Chamrousse",
km >= 100 & km < 133 ~ "St- Nazaire-les Eymes",
km >= 133 & km < 159 ~ "Cabane du Bachasson",
km >= 159 & km <= 175 ~ "Grenoble",
TRUE ~ NA_character_
))
# ----------------------------------------------------------------------------- #
# Jointure de data_score et data_km_section
data_km_section_score <- data_km_section %>% left_join(data_score, by = "section")
data_km_section_score$numero_participant<- as.numeric(data_km_section_score$numero_participant)
data_km_section_score <- data_km_section_score[order(data_km_section_score$numero_participant), ]
# ----------------------------------------------------------------------------- #
# Traitement des données de dénivelé
data_denivele$denivele_positif <- c(data_denivele$denivele_pos[1], diff(data_denivele$denivele_pos))
data_denivele$denivele_negatif <- c(data_denivele$denivele_neg[1], diff(data_denivele$denivele_neg))
colnames(data_denivele) <- c("km",
"altitutide",
"denivele_pos_cum",
"denivele_neg_cum",
"denivele_positif",
"denivele_negatif")
# ----------------------------------------------------------------------------- #
# Jointure de data_km_section_score et denivele
data_km_section_score_denivele <- data_km_section_score %>%
left_join(data_denivele, by = "km")
# ----------------------------------------------------------------------------- #
# Calculer le temps par km en fonction des dénivelés
data_km_section_score_denivele <- data_km_section_score_denivele %>%
group_by(numero_participant, section) %>%
mutate(
temps_par_km_minute = ifelse(km == 0, 0,
(temps_ecoule_en_heure * 60) * (1/3 * denivele_positif + 2/3 * denivele_negatif) /
sum(1/3 * denivele_positif + 2/3 * denivele_negatif))
)
# Créer une colonne "temps_en_minute_cumule" basée sur la distance parcourue
data_km_section_score_denivele <- data_km_section_score_denivele %>%
group_by(numero_participant) %>%
mutate(temps_en_minute_cumule = cumsum(temps_par_km_minute))
# Convertir temps_en_minute_cumule en secondes
data_km_section_score_denivele %<>%
mutate(
temps_en_seconde_cumule = temps_en_minute_cumule * 60,
nouvelle_date = as.POSIXct("2023-07-21 09:00:00", format = "%Y-%m-%d %H:%M:%S") + lubridate::seconds(temps_en_seconde_cumule)
) %>%
mutate(nouvelle_date = format(nouvelle_date, format="%Y-%m-%d %H:%M:%S")) %>%
select(-date) %>%
select(-temps_en_seconde_cumule)
# ----------------------------------------------------------------------------- #
# Calculer la moyenne de la glycémie par participant et par km
moy_glycemie <- data.frame(numero_participant = numeric(0), km = numeric(0), glucose = numeric(0))
for(i in 1:length(unique(data_km_section_score_denivele$numero_participant))){
km <- as.vector(data_km_section_score_denivele %>% filter(numero_participant == i) %>% select(km))$km
cpt <- 0
for(j in km){
if(j == 0 | (j-1) != (cpt-1)){
date <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j)
data_temp <- data_glycemie %>%
filter(numero_participant == i) %>%
filter(datetime == date$nouvelle_date)
nouvelle_val <- c(i, j, data_temp$glucose)
moy_glycemie <- rbind(moy_glycemie, nouvelle_val)
} else {
date_debut <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j - 1)
date_fin <- data_km_section_score_denivele %>%
filter(numero_participant == i) %>%
filter(km == j)
data_temp <- data_glycemie %>%
filter(numero_participant == i) %>%
filter(datetime >= date_debut$nouvelle_date & datetime <= date_fin$nouvelle_date)
nouvelle_val <- c(i, j, mean(data_temp$glucose))
moy_glycemie <- rbind(moy_glycemie, nouvelle_val)
}
cpt <- cpt + 1
}
}
colnames(moy_glycemie) <- c("numero_participant", "km", "moy_glucose")
# ----------------------------------------------------------------------------- #
# Jointure entre ka moyenne glycémique et notre data score
data_km_section_score_glycemie <- data_km_section_score_denivele %>% left_join(moy_glycemie, by = c("numero_participant", "km"))
# ----------------------------------------------------------------------------- #
# Écrire le dataframe dans le fichier CSV
write.csv2(data_km_section_score_glycemie, file = "~/Documents/GitHub/UT4M_psycho/Glycémie/Donnée/data_km_section_score_glycemieV2.csv", row.names = FALSE)
