library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("Nombre de gènes selectionnées", "Ratio (%)")
gt(data_bis) %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli") %>% rownames(noms_lignes)
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("Nombre de gènes selectionnées", "Ratio (%)")
gt(data_bis) %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli") %>% rownames(noms_lignes)
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("Nombre de gènes selectionnées", "Ratio (%)")
gt(data_bis) %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli")
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("","","Nombre de gènes selectionnées", "Ratio (%)")
gt(data_bis) %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli") %>% rownames(noms_lignes)
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("","","Nombre de gènes selectionnées", "Ratio (%)")
tableau = gt(data_bis) %>% rownames(noms_lignes)
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("Nombre de gènes selectionnées", "Ratio (%)")
tableau = gt(data_bis) %>% rownames(noms_lignes)
tableau = gt(data_bis) %>% rownames(noms_lignes)
gt(data_bis)
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("","Nombre de gènes selectionnées", "Ratio (%)")
tableau = gt(data_bis) %>% rownames(noms_lignes)
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("","Nombre de gènes selectionnées", "Ratio (%)")
tableau = gt(data_bis)
nrow(tableau$data)
# %>% rownames(noms_lignes)
# tableau %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli")
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("","Nombre de gènes selectionnées", "Ratio (%)")
tableau = gt(data = data_bis)
nrow(tableau$data)
# %>% rownames(noms_lignes)
# tableau %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli")
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c(,<"Nombre de gènes selectionnées", "Ratio (%)")
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c(,<"Nombre de gènes selectionnées", "Ratio (%)")
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
data_bis = data.frame(Bon, Hol, Hoch, Bh, By)
noms_lignes = c("Nombre de gènes selectionnées", "Ratio (%)")
gt(data_bis) %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli")
library(gt)
library(dplyr)
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
Titre = c("Nombre de gènes selectionnées", "Ratio (%)")
data_bis = data.frame(Titre, Bon, Hol, Hoch, Bh, By)
noms_lignes = c("Nombre de gènes selectionnées", "Ratio (%)")
gt(data_bis) %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Titre = "", Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli")
rep(0, 80)
m = 100
mu = c(rep(0, 80), rep(4,20))
rho = 0
m = 100
mu = c(rep(0, 80), rep(4,20))
rho = 0
sim_pval(m,rho,mu)
# Implémentation de la fonction
sigma = 1
sim_pval = function(m, rho, mu){
w = rnorm(1)
xi = rnorm(m)
X = mu + sqrt(rho)*w + sqrt(1-rho)*xi
pval = 1-pnorm(X)
print(pval)
}
# Test de la fonction
m = 10
rho = 0
mu = rep(0,10)
sim_pval(m,rho,mu)
m = 100
mu = c(rep(0, 80), rep(4,20))
rho = 0
sim_pval(m,rho,mu)
m = 100
mu = c(rep(0, 80), rep(4,20))
rho = 0
p_valeurs = sim_pval(m,rho,mu)
p_valeurs_bonferroni = p.adjust(p_valeurs, method = "bonferroni")
p_valeurs_holm = p.adjust(p_valeurs, method = "holm")
p_valeurs_hochberg = p.adjust(p_valeurs, method = "hochberg")
p_valeurs_BH = p.adjust(p_valeurs, method = "BH")
p_valeurs_BY = p.adjust(p_valeurs, method = "BY")
nb_rejet_sans_ajust = 0
for (i in 1:m){
if (p_valeurs[i] < 0.05){
nb_rejet_sans_ajust = nb_rejet_sans_ajust + 1
}
}
nb_rejet_sans_ajust
m = length(p_valeurs_bonferroni)
nb_rejet_Bonferroni = 0
for (i in 1:m){
if (p_valeurs_bonferroni[i] < 0.05){
nb_rejet_Bonferroni = nb_rejet_Bonferroni + 1
}
}
nb_rejet_Bonferroni
m = length(p_valeurs_holm)
nb_rejet_Holm = 0
for (i in 1:m){
if (p_valeurs_holm[i] < 0.05){
nb_rejet_Holm = nb_rejet_Holm + 1
}
}
nb_rejet_Holm
m = length(p_valeurs_hochberg)
nb_rejet_Hochberg = 0
for (i in 1:m){
if (p_valeurs_hochberg[i] < 0.05){
nb_rejet_Hochberg = nb_rejet_Hochberg + 1
}
}
nb_rejet_Hochberg
m = length(p_valeurs_BH)
nb_rejet_BH = 0
for (i in 1:m){
if (p_valeurs_BH[i] < 0.05){
nb_rejet_BH = nb_rejet_BH + 1
}
}
nb_rejet_BH
m = length(p_valeurs_BY)
nb_rejet_BY = 0
for (i in 1:m){
if (p_valeurs_BY[i] < 0.05){
nb_rejet_BY = nb_rejet_BY + 1
}
}
nb_rejet_BY
data_train <- readRDS("data_train.rds")
# Chargement de la librairie
library(dplyr)
library(ggplot2)
# Retrait des données des histologies mixtes
data_train_2 = data_train %>% filter(histology != "mixed_gli")
# Recodage des modalités d'histologie
data_train_2$histology = as.factor(data_train_2$histology)
levels(data_train_2$histology)[1]="astrocytes"
levels(data_train_2$histology)[2]="astrocytes"
levels(data_train_2$histology)[3]="oligocytes"
levels(data_train_2$histology)[4]="oligocytes"
# Calcul des p-valeurs
pval = c()
for (i in 4:1003){
test = t.test(data_train_2[,i] ~ data_train_2$histology)
pval = c(pval,test$p.value)
}
# Calcul des p-valeurs
pval = c()
for (i in 4:1003){
test = t.test(data_train_2[,i] ~ data_train_2$histology)
pval = c(pval,test$p.value)
}
#Fonction de Bonferroni
Bonferroni = function(pval, alpha, m){
nb_rejet = 0
for (i in 1:m){
if (pval[i] <= alpha/m){
nb_rejet = nb_rejet + 1
}
}
print(nb_rejet)
}
# Application de la procédure de Bonferroni sur les données
alpha = 0.05
m = length(pval)
Bonferroni(pval, alpha, m)
pval_bonferroni = p.adjust(pval, method = "bonferroni")
m = length(pval_bonferroni)
nb_rejet_bonferroni = 0
for (i in 1:m){
if (pval_bonferroni[i] < 0.05){
nb_rejet_bonferroni = nb_rejet_bonferroni + 1
}
}
nb_rejet_bonferroni
#Fonction pour la procédure de Holm
Holm = function(pval, alpha, m){
i = 1
while (pval[i]<= alpha/(m-i+1)) {
i = i+1
}
print(i-1)
}
# Application de la procédure de Bonferroni sur les données
alpha = 0.05
m = length(pval)
pval_sort = sort(pval)
Holm(pval_sort, alpha, m)
# P-valeurs ajustée par la fonction p.adjust
pval_holm = p.adjust(pval, method = "holm")
# Calcul du nombre de rejet
m = length(pval_holm)
nb_rejet_holm = 0
for (i in 1:m){
if (pval_holm[i] < 0.05){
nb_rejet_holm = nb_rejet_holm + 1
}
}
nb_rejet_holm
#Fonction pour la procédure de Hochberg
Hochberg = function(pval, alpha, m){
j = m
while (pval[j]>alpha/(m-j+1)) {
j = j - 1
}
print(j)
}
# Application de la procédure de Hochberg sur les données
alpha = 0.05
m = length(pval)
pval_sort = sort(pval)
Hochberg(pval_sort, alpha, m)
# P-valeurs ajustée par la fonction p.adjust
pval_hochberg = p.adjust(pval, method = "hochberg")
# Calcul du nombre de rejet
m = length(pval_hochberg)
nb_rejet_hochberg = 0
for (i in 1:m){
if (pval_hochberg[i] < 0.05){
nb_rejet_hochberg = nb_rejet_hochberg + 1
}
}
nb_rejet_hochberg
#Fonction pour la procédure de Benjamini-Hochberg
BH = function(pval, alpha, m){
i = m
while (pval[i] > (alpha*i)/m){
i = i - 1
}
print(i)
}
# Application de la procédure de Hochberg sur les données
alpha = 0.05
m = length(pval)
pval_sort = sort(pval)
BH(pval_sort, alpha, m)
# P-valeurs ajustées par la fonction p.adjust
pval_BH = p.adjust(pval, method = "BH")
# Calcul du nombre de rejet
m = length(pval_BH)
nb_rejet_BH = 0
for (i in 1:m){
if (pval_BH[i] < 0.05){
nb_rejet_BH = nb_rejet_BH + 1
}
}
nb_rejet_BH
# Fonction pour la procédure de Benjamini-Yekutielli
BY = function(pval, alpha, m){
i = m
Sm = sum(1/(1:m))
while (pval[i] > (alpha* i)/(m * Sm)){
i = i - 1
}
print(i)
}
# Application de la procédure de Hochberg sur les données
alpha = 0.05
m = length(pval)
pval_sort = sort(pval)
BY(pval_sort, alpha, m)
# P-valeurs ajustées par la fonction p.adjust
pval_BY = p.adjust(pval, method = "BY")
# Calcul du nombre de rejet
m = length(pval_BY)
nb_rejet_BY = 0
for (i in 1:m){
if (pval_BY[i] < 0.05){
nb_rejet_BY = nb_rejet_BY + 1
}
}
nb_rejet_BY
# Création d'un dataframe avec toutes les données
m = length(pval)
data = data.frame(
index = 1: m,
p_valeur = sort(pval),
p_bonferroni = pval_bonferroni,
p_holm = pval_holm,
p_hochberg = pval_hochberg,
p_BH = pval_BH,
p_BY = pval_BY
)
# Définition de l'intervalle de l'axe des ordonnées
ylims<- c(0, 0.1)
# Conception du graphique
x = data$index
plot(x, sort(data$p_bonferroni), col="red", type = "l", ylim = ylims, xlab = "Index de la p-valeur", ylab = "P-valeur ajustée", main = "P-valeur ajustée selon différentes méthodes \n en fonction de l'index de la p-valeur")
lines(x, sort(data$p_holm), col = "blue")
lines(x, sort(data$p_hochberg), col = "green")
lines(x, sort(data$p_BH), col = "purple")
lines(x, sort(data$p_BY), col = "orange")
abline(h=0.05, lty = 2)
legend("topright", legend = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini-Yekutielli"), col = c("red","blue", "green", "purple", "orange"), lty = 1)
# Conception du graphique
x = data$index
plot(x, sort(data$p_bonferroni), col="red", type = "l", ylim = ylims, xlab = "Index de la p-valeur", ylab = "P-valeur ajustée", main = "P-valeur ajustée selon différentes méthodes \n en fonction de l'index de la p-valeur")
lines(x, sort(data$p_holm), col = "blue")
lines(x, sort(data$p_hochberg), col = "green")
lines(x, sort(data$p_BH), col = "purple")
lines(x, sort(data$p_BY), col = "orange")
abline(h=0.05, lty = 2)
legend("topright", legend = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini-Yekutielli", "Seuil alpha"), col = c("red","blue", "green", "purple", "orange", "black"), lty = c(1,1,1,1,1,2))
# Conception du graphique
x = data$index
plot(x, sort(data$p_bonferroni), col="red", type = "l", ylim = ylims, xlab = "Index de la p-valeur", ylab = "P-valeur ajustée", main = "P-valeur ajustée selon différentes méthodes \n en fonction de l'index de la p-valeur")
lines(x, sort(data$p_holm), col = "blue")
lines(x, sort(data$p_hochberg), col = "green")
lines(x, sort(data$p_BH), col = "purple")
lines(x, sort(data$p_BY), col = "orange")
abline(h=0.05, lty = 2)
legend("topright", legend = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini-Yekutielli", "Seuil alpha"), col = c("red","blue", "green", "purple", "orange", "black"), lty = c(1,1,1,1,1,2), cex = 0.8)
# Conception du graphique
x = data$index
plot(x, sort(data$p_bonferroni), col="red", type = "l", ylim = ylims, xlab = "Index de la p-valeur", ylab = "P-valeur ajustée", main = "P-valeurs ajustées selon différentes méthodes \n en fonction de l'index de la p-valeur")
lines(x, sort(data$p_holm), col = "blue")
lines(x, sort(data$p_hochberg), col = "green")
lines(x, sort(data$p_BH), col = "purple")
lines(x, sort(data$p_BY), col = "orange")
abline(h=0.05, lty = 2)
legend("topright", legend = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini-Yekutielli", "Seuil alpha"), col = c("red","blue", "green", "purple", "orange", "black"), lty = c(1,1,1,1,1,2), cex = 0.8)
# Conception du graphique
x = data$index
plot(x, sort(data$p_bonferroni), col="red", type = "l", ylim = ylims, xlab = "Index de la p-valeur", ylab = "P-valeur ajustée", main = "P-valeurs ajustées selon différentes méthodes \n en fonction de l'index de la p-valeur")
lines(x, sort(data$p_holm), col = "blue")
#lines(x, sort(data$p_hochberg), col = "green")
lines(x, sort(data$p_BH), col = "purple")
lines(x, sort(data$p_BY), col = "orange")
abline(h=0.05, lty = 2)
legend("topright", legend = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini-Yekutielli", "Seuil alpha"), col = c("red","blue", "green", "purple", "orange", "black"), lty = c(1,1,1,1,1,2), cex = 0.8)
# Conception du graphique
x = data$index
plot(x, sort(data$p_bonferroni), col="red", type = "l", ylim = ylims, xlab = "Index de la p-valeur", ylab = "P-valeur ajustée", main = "P-valeurs ajustées selon différentes méthodes \n en fonction de l'index de la p-valeur")
lines(x, sort(data$p_holm), col = "blue")
lines(x, sort(data$p_hochberg), col = "green", lty = 2)
lines(x, sort(data$p_BH), col = "purple")
lines(x, sort(data$p_BY), col = "orange")
abline(h=0.05, lty = 2)
legend("topright", legend = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini-Yekutielli", "Seuil alpha"), col = c("red","blue", "green", "purple", "orange", "black"), lty = c(1,1,1,1,1,2), cex = 0.8)
# Conception du graphique
x = data$index
plot(x, sort(data$p_bonferroni), col="red", type = "l", ylim = ylims, xlab = "Index de la p-valeur", ylab = "P-valeur ajustée", main = "P-valeurs ajustées selon différentes méthodes \n en fonction de l'index de la p-valeur")
lines(x, sort(data$p_holm), col = "blue")
lines(x, sort(data$p_hochberg), col = "green", lty = 2)
lines(x, sort(data$p_BH), col = "purple")
lines(x, sort(data$p_BY), col = "orange")
abline(h=0.05, lty = 2)
legend("topright", legend = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini-Yekutielli", "Seuil alpha"), col = c("red","blue", "green", "purple", "orange", "black"), lty = c(1,1,2,1,1,2), cex = 0.8)
# Calcul des ratios
m = length(pval)
ratio_bonferroni = nb_rejet_bonferroni/m * 100
ratio_holm = nb_rejet_holm/m * 100
ratio_hochberg = nb_rejet_hochberg/m * 100
ratio_BH = nb_rejet_BH/m * 100
ratio_BY = nb_rejet_BY/m * 100
# Chargement des librairies
library(gt)
library(dplyr)
# Création d'un tableau récapitulatif
Bon = c(nb_rejet_bonferroni, ratio_bonferroni)
Hol = c(nb_rejet_holm,ratio_holm)
Hoch = c(nb_rejet_hochberg,ratio_hochberg)
Bh = c(nb_rejet_BH,ratio_BH)
By = c(nb_rejet_BY,ratio_BY)
Titre = c("Nombre de gènes selectionnées", "Ratio (%)")
data_bis = data.frame(Titre, Bon, Hol, Hoch, Bh, By)
noms_lignes = c("Nombre de gènes selectionnées", "Ratio (%)")
gt(data_bis) %>% tab_spanner(label = "Méthode", columns = c(Bon, Hol, Hoch, Bh, By)) %>% cols_label(Titre = "", Bon = "Bonferroni", Hol = "Holm", Hoch = "Hochberg", Bh = "Benjamini-Hochberg", By="Benjamini-Yekutielli")
# Implémentation de la fonction
sigma = 1
sim_pval = function(m, rho, mu){
w = rnorm(1)
xi = rnorm(m)
X = mu + sqrt(rho)*w + sqrt(1-rho)*xi
pval = 1-pnorm(X)
print(pval)
}
# Test de la fonction
m = 10
rho = 0
mu = rep(0,10)
sim_pval(m,rho,mu)
m = 100
mu = c(rep(0, 80), rep(4,20))
rho = 0
p_valeurs = sim_pval(m,rho,mu)
# Simulation des p-valeurs
m = 100
mu = c(rep(0, 80), rep(4,20))
rho = 0
p_valeurs = sim_pval(m,rho,mu)
# Application des procédures de contrôle du FWER
p_valeurs_bonferroni = p.adjust(p_valeurs, method = "bonferroni")
p_valeurs_holm = p.adjust(p_valeurs, method = "holm")
p_valeurs_hochberg = p.adjust(p_valeurs, method = "hochberg")
# Application des procédures de contrôle du FDR
p_valeurs_BH = p.adjust(p_valeurs, method = "BH")
p_valeurs_BY = p.adjust(p_valeurs, method = "BY")
library(ggplot2)
plot <- ggplot(data, aes(x = index)) +
geom_line(aes(y = sort(p_bonferroni)), color = "red") +
geom_line(aes(y = sort(p_holm)), color = "blue") +
geom_line(aes(y = sort(p_hochberg)), color = "green") +
geom_line(aes(y = sort(p_BH)), color = "purple") +
geom_line(aes(y = sort(p_BY)), color = "orange") +
coord_cartesian(ylim = ylims) +
labs(title = "P-valeurs ajustées en fonction de l'index", x = "Index", y = "P-valeurs ajustées") + scale_color_manual(name = "Méthode", values = c("red","blue", "green", "purple", "orange"), labels = c("Bonferroni", "Holm", "Hochberg", "Benjamini-Hochberg", "Benjamini_Yekutielli"))+theme_minimal()
plot
data = read.csv("Data/Reponse_questionnaire_V0.csv")
setwd("C:/Users/ocean/Documents/GitHub/UT4M_psycho/Analyse descriptive")
data = read.csv("Data/Reponse_questionnaire_V0.csv")
data = read.csv(";;/Data/Reponse_questionnaire_V0.csv")
data = read.csv("../Data/Reponse_questionnaire_V0.csv")
data = read.csv("./Data/Reponse_questionnaire_V0.csv")
setwd("C:/Users/ocean/Documents/GitHub/UT4M_psycho/Analyse descriptive")
setwd("C:/Users/ocean/Documents/GitHub/UT4M_psycho/Analyse descriptive")
library(readr)
Reponse_questionnaire_V1 <- read_delim("~/GitHub/UT4M_psycho/Data/Reponse_questionnaire_V1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(Reponse_questionnaire_V1)
View(Reponse_questionnaire_V1)
