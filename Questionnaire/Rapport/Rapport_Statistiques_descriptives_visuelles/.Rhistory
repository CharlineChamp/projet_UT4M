plot(lasso_model)
# Utiliser la fonction cv.glmnet pour la régression Lasso avec validation croisée
lasso_model <- glmnet(X, Y, alpha = 1, lambda = lambdas)
plot(lasso_model)
plot(coef(lasso_model))
coef(lasso_model)
# Utiliser la fonction cv.glmnet pour la régression Lasso avec validation croisée
lasso_model <- glmnet(X, Y, alpha = 1, lambda = lambda)
plot(coef(lasso_model))
# Installer et charger la bibliothèque glmnet
install.packages("glmnet")
library(glmnet)
# Générer des données
set.seed(42)
n <- 100
p <- 2000
X <- matrix(rnorm(n * p, mean = 1, sd = 0.1), nrow = n, ncol = p)
# Générer une réponse dépendant des 20 premières covariables
true_coefficients <- c(runif(20, 3, 4), rep(0, p - 20))
y_true <- X[, 1:20] %*% true_coefficients[1:20] + rnorm(n)
# Ajouter du bruit à la réponse
y <- y_true + rnorm(n)
# Effectuer la régression Lasso en variant le paramètre de régularisation
alpha_values <- seq(0, 1, length = 10)
predictions <- matrix(NA, nrow = n, ncol = length(alpha_values))
for (i in seq_along(alpha_values)) {
alpha <- alpha_values[i]
lasso_model <- cv.glmnet(X, y, alpha = alpha)
predictions[, i] <- predict(lasso_model, newx = X, s = "lambda.min")
install.packages("glmnet")
}
# Tracer l'évolution des prédictions
matplot(alpha_values, predictions, type = "l", xlab = "Alpha (Lasso)", ylab = "Predictions",
main = "Evolution des prédictions de Lasso en fonction du paramètre de régularisation")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
# Installer et charger la bibliothèque glmnet
library(glmnet)
# Générer des données
set.seed(42)
n <- 100
p <- 2000
X <- matrix(rnorm(n * p, mean = 1, sd = 0.1), nrow = n, ncol = p)
# Générer une réponse dépendant des 20 premières covariables
true_coefficients <- c(runif(20, 3, 4), rep(0, p - 20))
y_true <- X[, 1:20] %*% true_coefficients[1:20] + rnorm(n)
# Ajouter du bruit à la réponse
y <- y_true + rnorm(n)
# Effectuer la régression Lasso en variant le paramètre de régularisation
alpha_values <- seq(0, 1, length = 10)
predictions <- matrix(NA, nrow = n, ncol = length(alpha_values))
for (i in seq_along(alpha_values)) {
alpha <- alpha_values[i]
lasso_model <- cv.glmnet(X, y, alpha = alpha)
predictions[, i] <- predict(lasso_model, newx = X, s = "lambda.min")
}
# Tracer l'évolution des prédictions
matplot(alpha_values, predictions, type = "l", xlab = "Alpha (Lasso)", ylab = "Predictions",
main = "Evolution des prédictions de Lasso en fonction du paramètre de régularisation")
# Vérifier les variables sélectionnées par Lasso pour différentes valeurs de alpha
selected_variables <- sapply(1:ncol(predictions), function(i) {
which(lasso_model$beta[, i] != 0)
})
print(selected_variables)
# Tracer l'évolution des prédictions
matplot(alpha_values, predictions, type = "l", xlab = "Alpha (Lasso)", ylab = "Predictions",
main = "Evolution des prédictions de Lasso en fonction du paramètre de régularisation")
print(selected_variables)
# Vérifier les variables sélectionnées par Lasso pour différentes valeurs de alpha
selected_variables <- lapply(1:ncol(predictions), function(i) {
selected <- which(lasso_model$beta[, i] != 0)
if (length(selected) == 0) {
return("Aucune variable sélectionnée")
} else {
return(names(true_coefficients[selected]))
}
})
print(selected_variables)
MSE = numeric(1)
MSE
MSE = numeric(10)
MSE
lambdas <- seq(0.1, 1, by = 0.01)
MSE = numeric(length(lambdas))
for (i in 1:length(lambdas)){
lasso_model <- glmnet(X, Y, alpha = 1, lambda = lambdas[i])
predictions <- predict(lasso_model, newx = X, s = "lambda.min")
MSE[i]<- mean((df$response -  predictions)^2)
}
plot(MSE)
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo = FALSE, results="verbatim", warning=FALSE)
data = read_excel("GitHub/UT4M_psycho/Data/Jeu_de_donnees.xlsx")
library(readxl)
data = read_excel("GitHub/UT4M_psycho/Data/Jeu_de_donnees.xlsx")
setwd("~/GitHub/UT4M_psycho/Rapport/Rapport_ACP")
library(readxl)
data = read_excel("../../Data/Jeu_de_donnees.xlsx")
library(FactoMineR)
colnames(data)
library(FactoMineR)
res.pca <- PCA(data[,46:65], graph = FALSE)
print(res.pca)
data[,46:65]
library(FactoMineR)
res.pca <- PCA(data[,46:65], graph = FALSE)
library(factoextra)
eig.val <- get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca, addlabels = TRUE)
library(factoextra)
eig.val <- get_eigenvalue(res.pca)
fviz_eig(res.pca, addlabels = TRUE)
var <- get_pca_var(res.pca)
var
fviz_pca_var(res.pca, col.var="black")
fviz_pca_var(res.pca, col.var="black", axes = 1:3)
fviz_pca_var(res.pca, col.var="black", axes = c(1,3)
fviz_pca_var(res.pca, col.var="black", axes = c(1,3))
fviz_pca_var(res.pca, col.var="black", axes = c(1,3))
var <- get_pca_var(res.pca)
fviz_pca_var(res.pca, col.var="black")
fviz_pca_var(res.pca, col.var="black", axes = c(1,3))
fviz_pca_var(res.pca, col.var="black", axes = c(1,4))
fviz_pca_var(res.pca, col.var="black", axes = c(1,5))
fviz_pca_var(res.pca, col.var="black", axes = c(1,6))
fviz_pca_var(res.pca, col.var="black", axes = c(1,6))
fviz_pca_var(res.pca, col.var="black", axes = c(2,3))
fviz_pca_var(res.pca, col.var="black", axes = c(2,4))
fviz_pca_var(res.pca, col.var="black", axes = c(2,5))
fviz_pca_var(res.pca, col.var="black", axes = c(2,6))
fviz_pca_var(res.pca, col.var="black", axes = c(3,4))
fviz_pca_var(res.pca, col.var="black", axes = c(3,5))
fviz_pca_var(res.pca, col.var="black", axes = c(3,6))
fviz_pca_var(res.pca, col.var="black", axes = c(4,5))
fviz_pca_var(res.pca, col.var="black", axes = c(4,6))
fviz_pca_var(res.pca, col.var="black", axes = c(5,6))
fviz_cos2(res.pca, choice = "var", axes = 1:2)
library(corrplot)
corrplot(var$cos2,is.corr = FALSE)
var <- get_pca_var(res.pca, axes = 1:2)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,3))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,4))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,4))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,5))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,3))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,4))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,5))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,4))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,5))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(4,5))
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
fviz_contrib(res.pca, choice = "var", axes = 2, top = 10)
fviz_contrib(res.pca, choice = "var", axes = 3, top = 10)
fviz_contrib(res.pca, choice = "var", axes = 3, top = 10)
fviz_contrib(res.pca, choice = "var", axes = 4, top = 10)
fviz_contrib(res.pca, choice = "var", axes = 5, top = 10)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,3))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,4))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,5))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,3))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,4))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,5))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,4))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,5))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(4,5))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,3))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,4))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,5))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,3))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,4))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,5))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,4))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,5))
fviz_pca_var(res.pca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(4,5))
res.desc <- dimdesc(res.pca, axes = c(1,2), proba = 0.05)
res.desc$Dim.1
res.desc$Dim.2
ind <- get_pca_ind(res.pca)
fviz_pca_ind (res.pca,repel = TRUE )
fviz_pca_ind (res.pca,repel = TRUE )
fviz_contrib(res.pca, choice = "ind", axes = 1:5)
fviz_pca_ind (res.pca,repel = TRUE )
fviz_pca_ind (res.pca,repel = TRUE, axes = c(1,3) )
fviz_pca_ind (res.pca,repel = TRUE, axes = c(1,4))
fviz_pca_ind (res.pca,repel = TRUE, axes = c(1,5))
fviz_pca_ind (res.pca,repel = TRUE, axes = c(2,3))
fviz_pca_ind (res.pca,repel = TRUE, axes = c(2,4))
fviz_pca_ind (res.pca,repel = TRUE, axes = c(2,5))
fviz_contrib(res.pca, choice = "ind", axes = 1:5)
fviz_pca_ind (res.pca,repel = TRUE, axes = c(3,4))
fviz_pca_ind (res.pca,repel = TRUE, axes = c(3,5))
fviz_pca_ind (res.pca,repel = TRUE, axes = c(4,5))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE )
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,3))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,4))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(1,5))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,3))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,4))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(2,5))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,4))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,4))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(3,5))
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, axes = c(4,5))
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969"
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(1,3)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(1,4)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(1,5)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(2,3)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(2,4)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(2,5)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(3,4)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(3,5)
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969",
axes = c(4,5)
)
setwd("~/GitHub/UT4M_psycho/Rapport/Rapport_Statistiques_descriptives_visuelles")
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo = FALSE, results="verbatim", warning=FALSE, message = FALSE)
data=read_excel("../../Data/dataset_V4.xlsx", sheet="Avec NA")
data$ITRA_rating_know
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo = FALSE, results="verbatim", warning=FALSE, message = FALSE)
library(readr)
library(ggplot2)
library(forcats)
library(dplyr)
library(stringr)
library(readxl)
library(RColorBrewer)
library(doBy)
data=read_excel("../../Data/dataset_V4.xlsx", sheet="Avec NA")
# Fonction pour spliter les colonnes de choix mulitples
choix_multiples = function(data, choix, nom_colonne, colonne){
matrice = matrix(nrow = dim(data)[1],ncol = length(choix))
df = as.data.frame(matrice)
for (j in 1 :length(choix)){
vecteur = c()
for (i in 1 : length(colonne)){
if(is.na(colonne[i])==FALSE){
if(str_detect(colonne[i],choix[j])==TRUE){
vecteur = c(vecteur,0)
}
else{ vecteur = c(vecteur,1)}
}
else{vecteur = c(vecteur,1)}
}
df[j]=vecteur
}
colnames(df) = nom_colonne
return(df)
}
# Fonction pour créer les graphiques des questions à choix unique
textual_unique_choice_plot <- function(column,ordered_levels,new_levels,colors,x_legend){
column <- as.factor(column)
column <- ordered(column, levels = ordered_levels)
df <- data.frame(column)
plot <- ggplot(df, aes(x=column)) +
geom_bar(aes(fill = column)) +
labs(x = x_legend, y = "Nombre d'observations") +
scale_fill_manual(values = colors) +
scale_x_discrete(breaks=c(levels(column),NA),labels=c(new_levels,"Non renseigné")) +
theme_bw() +
theme(legend.position='none',
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))
return(plot)
}
# Fonction pour créer les graphiques des questions à choix multiples
textual_multiple_choices_plot <- function(data,vec_choix,vec_nom_colonne,colonne,x_legend,angle,hjust){
df = choix_multiples(data,vec_choix,vec_nom_colonne,colonne)
df = data.frame(dim(df)[1] - colSums(df))
colnames(df) <- c("nombre")
df = data.frame(nom = vec_choix,nombre = df$nombre)
plot <- ggplot(df, aes(x=nom,y=nombre)) +
geom_bar(aes(fill = nom),stat = "identity") +
labs(x = x_legend, y = "Nombre d'observations") +
theme_bw() +
theme(legend.position='none',
axis.text.x = element_text(size = 15,angle = angle,hjust = hjust),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))
return(plot)
}
ggplot(data, aes(x=sex)) +
geom_bar(aes(fill = sex)) +
labs(x = "Sexe", y = "Nombre d'observations") +
scale_fill_manual(values = c("pink", "lightblue")) +
theme_bw() +
theme(legend.position='none',
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))
ggplot(data, aes(x=age)) +
geom_histogram(binwidth=2.5, alpha=0.6) +
labs(x = "Age", y = "Nombre d'observations") +
theme_bw() +
theme(legend.position='none')
ggplot(data, aes(x=weight)) +
geom_histogram(binwidth=5, alpha=0.6) +
labs(x = "Poids", y = "Nombre d'observations") +
theme_bw() +
theme(legend.position='none')
ggplot(data, aes(x=max_weight)) +
geom_histogram(binwidth=5, alpha=0.6) +
labs(x = "Poids le plus haut", y = "Nombre d'observations") +
theme_bw() +
theme(legend.position='none')
ggplot(data, aes(x=min_weight)) +
geom_histogram(binwidth=5, alpha=0.6) +
labs(x = "Poids le plus bas", y = "Nombre d'observations") +
theme_bw() +
theme(legend.position='none')
column = data$weekly_volume_profession
ordered_levels <- c("⩽ 35 heures / semaine" ,"entre 36 et 45 heures / semaine","⩾ 45h / semaine")
new_levels <- c("< ou = 35h", "entre 36h et 45h","> ou = 45h")
colors <- c("lightgoldenrod1", "tan1","indianred1")
x_legend <- "Volume horaire hebdomadaire consacré à la profession"
textual_unique_choice_plot(column,ordered_levels,new_levels,colors,x_legend)
column = data$start_trail
ordered_levels <- c("< 2 ans","Entre 2 et 5 ans","Entre 5 et 10 ans","> 10 ans")
new_levels <- c("< 2 ans", "Entre 2 et 5 ans","Entre 5 et 10 ans","> 10 ans")
colors <- c("seagreen1","lightgoldenrod1", "tan1","indianred1")
x_legend <- "Durée partique trail"
textual_unique_choice_plot(column,ordered_levels,new_levels,colors,x_legend)
vec_choix = c("Cyclisme / Vtt","Natation","Ski de fond / Skating","Ski de randonnée",
"Préparation physique Générale","Aucune","Autres")
vec_nom_colonne = c("cycling_mountain_biking","swimming","cross-country_skiing_skating","ski_touring",
"general_physical_preparation","no_other_practice","other_other_practice")
colonne = data$other_practice
x_legend = "Autres pratiques"
angle = 45
hjust = 1
textual_multiple_choices_plot(data,vec_choix,vec_nom_colonne,colonne,x_legend,angle,hjust)
column = data$time_proportion_other_practice
ordered_levels <- c("< 20%","Entre 20% et 50%","> 50%")
new_levels <- c("< 20%","Entre 20% et 50%","> 50%")
colors <- c("lightgoldenrod1", "tan1","indianred1")
x_legend <- "Proportion autres disciplines"
textual_unique_choice_plot(column,ordered_levels,new_levels,colors,x_legend)
data$coach_for_trail = as.factor(data$coach_for_trail)
ggplot(data = data, aes(coach_for_trail, fill = coach_for_trail))+
geom_bar() + theme_bw() +
labs(y = "Nombre d'observations", title = "Êtes-vous suivi par un coach dans votre préparation à vos objectifs de trail ?",x = "Présence d'un coach")+
scale_fill_manual (values = c("indianred1", "seagreen1"), name = "Présence d'un coach", labels = c("Non", "Oui", "Non renseigné")) +
scale_x_discrete(labels = c("Non", "Oui", "Non renseigné")) + theme(legend.position = "none")
data$heart_rate_monitor_train = as.factor(data$heart_rate_monitor_train)
ggplot(data = data, aes(heart_rate_monitor_train, fill = heart_rate_monitor_train))+
geom_bar() + theme_bw() +
labs(y = "Nombre d'observations", title = "Utilisez-vous un cardiofréquencemètre à l'entraînement ?",x = "Utilisation d'un cardiofréquencemètre")+
scale_fill_manual (values = c("indianred1", "seagreen1"), name = "Utilisation d'un cardiofréquencemètre", labels = c("Non", "Oui", "Non renseigné")) +
scale_x_discrete(labels = c("Non", "Oui", "Non renseigné")) + theme(legend.position = "none")
data$heart_rate_monitor_competition = as.factor(data$heart_rate_monitor_competition)
ggplot(data = data, aes(heart_rate_monitor_competition, fill = heart_rate_monitor_competition))+
geom_bar() + theme_bw() +
labs(y = "Nombre d'observations", title = "Utilisez-vous un cardiofréquencemètre en compétition ?",x = "Utilisation d'un cardiofréquencemètre")+
scale_fill_manual (values = c("indianred1", "seagreen1"), name = "Utilisation d'un cardiofréquencemètre", labels = c("Non", "Oui", "Non renseigné")) +
scale_x_discrete(labels = c("Non", "Oui", "Non renseigné")) + theme(legend.position = "none")
data$connected_platform = as.factor(data$connected_platform)
ggplot(data = data, aes(connected_platform, fill = connected_platform))+
geom_bar() + theme_bw() +
labs(y = "Nombre d'observations", title = "Téléchargez-vous vos données d'entraînement sur une plateforme connectée ?",x = "Téléchargement des données d'entraînement")+
scale_fill_manual (values = c("indianred1", "seagreen1"), name = "Téléchargement des données d'entraînement", labels = c("Non", "Oui", "Non renseigné")) +
scale_x_discrete(labels = c("Non", "Oui", "Non renseigné")) + theme(legend.position = "none")
data$ITRA_rating_know = as.factor(data$ITRA_rating_know)
data$ITRA_rating_know
table(data$ITRA_rating_know)
211+17-358
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo = FALSE, results="verbatim", warning=FALSE, message = FALSE)
library(readr)
library(ggplot2)
library(forcats)
library(dplyr)
library(stringr)
library(readxl)
library(RColorBrewer)
library(doBy)
data=read_excel("../../Data/dataset_V4.xlsx", sheet="Avec NA")
