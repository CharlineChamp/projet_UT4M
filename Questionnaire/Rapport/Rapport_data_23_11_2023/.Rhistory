geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
other_table <- table(data_complete$cluster, data_complete$number_hours_practice_trail_phase_preparation)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(other_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, chi_squared_test$p.value)
# Nombre total de tests
num_tests <- length(p_valeurs)
# Correction de Bonferroni
adjusted_p_values <- p.adjust(p_valeurs, method = "BH")
# Affichage des p-valeurs ajustées
#adjusted_p_values
# Création d'une data frame
nom_var <- c("Sexe",
"Age",
"Poids",
"Coach",
"Blessure",
"Côte ITRA",
"Courses",
"Courses regroupées",
"Temps d'experience en trail",
"Volume hebdomadaire consacré à la profession",
"Proportion des autres disciplines",
"Volume d'entrainement par semaine",
"Epanouissement",
"Conflits entre vie personnelle et pratique de l’activité sportive",
"Motivation intrinsèque",
"Motivation identifiée",
"Motivation intégrée",
"Motivation introjectée",
"Motivation externe",
"Force mentale",
"Confiance",
"Consistance",
"Contrôle",
"Discours interne",
"Discours interne en compétition",
"Discours interne à l'entrainement",
"Anxiété générale",
"Anxiété somatique",
"Anxiété cognitive",
"Passion harmonieuse",
"Passion obsessive",
"Addiction"
)
df_pval <- data.frame("Nom de variables" = nom_var, "P-valeurs" = round(p_valeurs,4), "P-valeurs ajustées" = round(adjusted_p_values,4))
gt(df_pval)
knitr::opts_chunk$set(collapse=TRUE, comment = ">", fig.width=9, fig.height=6, eval=TRUE, echo = FALSE, results="verbatim", warning=FALSE)
library(readxl)
library(mclust)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(gt)
library(stats)
library(magrittr)
# Importation des données
data <- read_excel("~/Documents/GitHub/UT4M_psycho/Data/dataset_V6.xlsx")
# Sélectionne les variables scores
data_score <- data[,c(1,46:65)]
# Sélectionner uniquement les lignes complètes
df <- data_score[complete.cases(data_score), ]
model1 <- Mclust(df[,c(2:21)])
#summary(model1)
model2 <- Mclust(df[,c(2:21)], G=2)
#summary(model2)
model3 <- Mclust(df[,c(2:21)], G=3)
#summary(model3)
model4 <- Mclust(df[,c(2:21)], G=4)
#summary(model4)
model5 <- Mclust(df[,c(2:21)], G=5)
#summary(model5)
# Création d'un dataframe pour les valeurs du BIC
bic_data <- data.frame(
Model = c("Modèle G = 1", "Modèle G = 2", "Modèle G = 3", "Modèle G = 4", "Modèle G = 5"),
BIC = c(model1$bic, model2$bic, model3$bic, model4$bic, model5$bic)
)
# Création du ggplot
ggplot(bic_data, aes(x = Model, y = BIC)) +
geom_point(size = 1, color = "darkblue") +
geom_text(aes(label = sprintf("%.2f", BIC)), vjust = -0.5, size = 3) +
labs(title = "",
x = "Modèles",
y = "Valeur BIC") +
theme_bw()
model2 <- Mclust(df[,c(2:21)], G=2)
summary(model2)
# Ajouter la colonne des clusters à notre dataframe d'origine
df$cluster <- model2$classification
# Affichage des premières lignes du dataframe modifié
gt(head(df[,c(1,20:22)]))
# Tableau récapitulatif du nombre d'observations par cluster
table(df$cluster)
data_complete <- data[,c(1:45)] %>% left_join(df, by = join_by(file_number))
data_sans_NA <- data_complete %>% filter(!is.na(cluster))
p_valeurs <- c()
# Créer le graphique avec les valeurs des données
ggplot(data_complete, aes(x = cluster, fill = sex)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
sex_table <- table(data_complete$cluster, data_complete$sex)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(sex_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de sa p-valeur
p_valeurs <- c(p_valeurs,chi_squared_test$p.value)
ggplot(data_sans_NA, aes(x = as.factor(cluster), y = age)) +
geom_boxplot() +
labs(title = "") +
theme_bw() +
xlab("Groupes")
# Effectuer le test t de Student
t_test_result <- t.test(age ~ cluster, data = data_sans_NA)
# Afficher le résultat du test t
print(t_test_result)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs,t_test_result$p.value)
ggplot(data_sans_NA, aes(x = as.factor(cluster), y = weight)) +
geom_boxplot() +
labs(title = "") +
theme_bw() +
xlab("Groupes")
# Effectuer le test t de Student
t_test_result <- t.test(weight ~ cluster, data = data_sans_NA)
# Afficher le résultat du test t
print(t_test_result)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs,t_test_result$p.value)
ggplot(data_complete, aes(x = cluster, fill = coach_for_trail)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
coach_table <- table(data_complete$cluster, data_complete$coach_for_trail)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(coach_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs,chi_squared_test$p.value)
ggplot(data_complete, aes(x = cluster, fill = trail_injury_illness)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
blessure_table <- table(data_complete$cluster, data_complete$trail_injury_illness)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(blessure_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs,chi_squared_test$p.value)
ggplot(data_sans_NA, aes(x = as.factor(cluster), y = ITRA_rating)) +
geom_boxplot() +
theme_bw() +
xlab("Groupes")
# Effectuer le test t de Student
t_test_result <- t.test(ITRA_rating ~ cluster, data = data_sans_NA)
# Afficher le résultat du test t
print(t_test_result)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs,t_test_result$p.value)
ggplot(data_complete, aes(x = cluster, fill = which_races_UT4M_2023)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
course_table <- table(data_complete$cluster, data_complete$which_races_UT4M_2023)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(course_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, chi_squared_test$p.value)
data_complete %<>% mutate(race2 = ifelse(which_races_UT4M_2023 == "Un des 40km" | which_races_UT4M_2023 == "Un des 20km","<= 40km",">= 40km"))
ggplot(data_complete, aes(x = cluster, fill = race2)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
course2_table <- table(data_complete$cluster, data_complete$race2)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(course2_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, chi_squared_test$p.value)
ggplot(data_complete, aes(x = cluster, fill = start_trail)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
experience_table <- table(data_complete$cluster, data_complete$start_trail)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(experience_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, chi_squared_test$p.value)
ggplot(data_complete, aes(x = cluster, fill = weekly_volume_profession)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
profession_table <- table(data_complete$cluster, data_complete$weekly_volume_profession)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(profession_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, chi_squared_test$p.value)
ggplot(data_complete, aes(x = cluster, fill = time_proportion_other_practice)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
other_table <- table(data_complete$cluster, data_complete$time_proportion_other_practice)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(other_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, chi_squared_test$p.value)
ggplot(data_complete, aes(x = cluster, fill = number_hours_practice_trail_phase_preparation)) +
geom_bar(position = "dodge", color = "black") +
geom_text(stat = "count", aes(label = ..count..),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(title = "") +
theme_bw()
# Créer la table de contingence
other_table <- table(data_complete$cluster, data_complete$number_hours_practice_trail_phase_preparation)
# Effectuer le test du chi-carré
chi_squared_test <- chisq.test(other_table)
# Afficher le résultat du test
print(chi_squared_test)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, chi_squared_test$p.value)
ggplot(data_sans_NA, aes(x = as.factor(cluster), y = fulfillment)) +
geom_boxplot() +
theme_bw() +
xlab("Groupes")
# Effectuer le test t de Student
t_test_result <- t.test(fulfillment ~ cluster, data = data_sans_NA)
# Afficher le résultat du test t
print(t_test_result)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, t_test_result$p.value)
ggplot(data_sans_NA, aes(x = as.factor(cluster), y = priority)) +
geom_boxplot() +
theme_bw() +
labs(title = "") +
ylab("") +
xlab("Groupes")
# Effectuer le test t de Student
t_test_result <- t.test(priority ~ cluster, data = data_sans_NA)
# Afficher le résultat du test t
print(t_test_result)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, t_test_result$p.value)
intrinsic_motivation <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = intrinsic_motivation)) +
geom_boxplot() +
labs(title = "Motivation intrinsèque") +
theme_bw() +
ylab("") +
xlab("Groupes")
identified_motivation <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = identified_motivation)) +
geom_boxplot() +
labs(title = "Motivation identifiée") +
theme_bw() +
ylab("") +
xlab("Groupes")
integrated_motivation <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = integrated_motivation)) +
geom_boxplot() +
labs(title = "Motivation intégrée") +
theme_bw() +
ylab("") +
xlab("Groupes")
introjected_motivation <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = introjected_motivation)) +
geom_boxplot() +
labs(title = "Motivation introjectée") +
theme_bw() +
ylab("") +
xlab("Groupes")
external_motivation <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = external_motivation)) +
geom_boxplot() +
labs(title = "Motivation externe") +
theme_bw() +
ylab("") +
xlab("Groupes")
ggarrange(intrinsic_motivation, identified_motivation, integrated_motivation, introjected_motivation, external_motivation,
ncol = 2, nrow = 3, legend = "none"
)
t_test_result <- t.test(intrinsic_motivation ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(identified_motivation ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(integrated_motivation ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(introjected_motivation ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(external_motivation ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
global_mental_force <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = global_mental_force)) +
geom_boxplot() +
labs(title = "Force mentale") +
ylab("") +
theme_bw() +
xlab("Groupes")
confidence <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = confidence)) +
geom_boxplot() +
labs(title = "Confiance") +
theme_bw() +
ylab("") +
xlab("Groupes")
consistency <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = consistency)) +
geom_boxplot() +
labs(title = "Consistance") +
theme_bw() +
ylab("") +
xlab("Groupes")
control <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = control)) +
geom_boxplot() +
labs(title = "Contrôle") +
theme_bw() +
ylab("") +
xlab("Groupes")
ggarrange(global_mental_force, confidence, consistency, control,
ncol = 2, nrow = 2, legend = "none"
)
t_test_result <- t.test(global_mental_force ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(confidence ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(consistency ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(control ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
general_internal_speech <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = general_internal_speech)) +
geom_boxplot() +
labs(title = "Discours interne") +
theme_bw() +
ylab("") +
xlab("Groupes")
competition_internal_speech <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = competition_internal_speech)) +
geom_boxplot() +
labs(title = "Discours interne en compétition") +
theme_bw() +
ylab("") +
xlab("Groupes")
training_internal_speech <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = training_internal_speech)) +
geom_boxplot() +
labs(title = "Discours interne à l’entrainement") +
theme_bw() +
ylab("") +
xlab("Groupes")
ggarrange(general_internal_speech, competition_internal_speech, training_internal_speech,
ncol = 2, nrow = 2, legend = "none"
)
t_test_result <- t.test(general_internal_speech ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(competition_internal_speech ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(training_internal_speech ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
general_precompetitive_anxiety <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = general_precompetitive_anxiety)) +
geom_boxplot() +
labs(title = "Anxiété générale") +
theme_bw()  +
ylab("") +
xlab("Groupes")
somatic_anxiety <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = somatic_anxiety)) +
geom_boxplot() +
labs(title = "Anxiété somatique") +
theme_bw()  +
ylab("") +
xlab("Groupes")
cognitive_anxiety <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = cognitive_anxiety)) +
geom_boxplot() +
labs(title = "Anxiété cognitive") +
theme_bw()  +
ylab("") +
xlab("Groupes")
ggarrange(general_precompetitive_anxiety, somatic_anxiety, cognitive_anxiety,
ncol = 2, nrow = 2, legend = "none"
)
t_test_result <- t.test(general_precompetitive_anxiety ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(somatic_anxiety ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(cognitive_anxiety ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
harmonious_hobbies <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = harmonious_hobbies)) +
geom_boxplot() +
labs(title = "Passion harmonieuse") +
theme_bw() +
ylab("") +
xlab("Groupes")
obsessive_hobbies <- ggplot(data_sans_NA, aes(x = as.factor(cluster), y = obsessive_hobbies)) +
geom_boxplot() +
labs(title = "Passion obsessive") +
theme_bw() +
ylab("") +
xlab("Groupes")
ggarrange(harmonious_hobbies,obsessive_hobbies,
ncol = 2, legend = "none"
)
t_test_result <- t.test(harmonious_hobbies ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
t_test_result <- t.test(obsessive_hobbies ~ cluster, data = data_sans_NA)
print(t_test_result)
p_valeurs <- c(p_valeurs, t_test_result$p.value)
ggplot(data_sans_NA, aes(x = as.factor(cluster), y = addiction)) +
geom_boxplot() +
theme_bw() +
xlab("Groupes")
# Effectuer le test t de Student
t_test_result <- t.test(addiction ~ cluster, data = data_sans_NA)
# Afficher le résultat du test t
print(t_test_result)
# Récupération de la p-valeur
p_valeurs <- c(p_valeurs, t_test_result$p.value)
# Nombre total de tests
num_tests <- length(p_valeurs)
# Correction de Bonferroni
adjusted_p_values <- p.adjust(p_valeurs, method = "BH")
# Affichage des p-valeurs ajustées
#adjusted_p_values
# Création d'une data frame
nom_var <- c("Sexe",
"Age",
"Poids",
"Coach",
"Blessure",
"Côte ITRA",
"Courses",
"Courses regroupées",
"Temps d'experience en trail",
"Volume hebdomadaire consacré à la profession",
"Proportion des autres disciplines",
"Volume d'entrainement par semaine",
"Epanouissement",
"Conflits entre vie personnelle et pratique de l’activité sportive",
"Motivation intrinsèque",
"Motivation identifiée",
"Motivation intégrée",
"Motivation introjectée",
"Motivation externe",
"Force mentale",
"Confiance",
"Consistance",
"Contrôle",
"Discours interne",
"Discours interne en compétition",
"Discours interne à l'entrainement",
"Anxiété générale",
"Anxiété somatique",
"Anxiété cognitive",
"Passion harmonieuse",
"Passion obsessive",
"Addiction"
)
df_pval <- data.frame("Nom de variables" = nom_var, "P-valeurs" = round(p_valeurs,4), "P-valeurs ajustées" = round(adjusted_p_values,4))
gt(df_pval)
table(data$number_hours_practice_trail_phase_preparation, data$weekly_volume_profession)
table(data$number_hours_practice_trail_phase_preparation, data$weekly_volume_profession)
prop.table(table(data$number_hours_practice_trail_phase_preparation, data$cluster), 2 )
prop.table(other_table, 2 )
prop.table(other_table, 1)
prop.table(other_table, 2)
